2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Current SDK version is 0.17.0
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Configure stats pid to 13664
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Loading settings from C:\Users\ramali\.config\wandb\settings
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Loading settings from C:\Users\ramali\PycharmProjects\PySCFabSim-Eval - Copy\wandb\settings
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': 'main.py', 'program_abspath': 'C:\\Users\\ramali\\PycharmProjects\\PySCFabSim-Eval - Copy\\main.py', 'program': 'C:/Users/ramali/PycharmProjects/PySCFabSim-Eval - Copy/main.py'}
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_setup.py:_flush():76] Applying login settings: {}
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:_log_setup():520] Logging user logs to C:\Users\ramali\PycharmProjects\PySCFabSim-Eval - Copy\wandb\run-20240729_141421-dwv18y3y\logs\debug.log
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:_log_setup():521] Logging internal logs to C:\Users\ramali\PycharmProjects\PySCFabSim-Eval - Copy\wandb\run-20240729_141421-dwv18y3y\logs\debug-internal.log
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:init():560] calling init triggers
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:init():567] wandb.init called with sweep_config: {}
config: {}
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:init():610] starting backend
2024-07-29 14:14:21,974 INFO    MainThread:13664 [wandb_init.py:init():614] setting up manager
2024-07-29 14:14:21,996 INFO    MainThread:13664 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=spawn, using: spawn
2024-07-29 14:14:22,011 INFO    MainThread:13664 [wandb_init.py:init():622] backend started and connected
2024-07-29 14:14:22,027 INFO    MainThread:13664 [wandb_init.py:init():711] updated telemetry
2024-07-29 14:14:22,096 INFO    MainThread:13664 [wandb_init.py:init():744] communicating run to backend with 90.0 second timeout
2024-07-29 14:14:22,096 ERROR   MainThread:13664 [wandb_init.py:init():1174] error in wandb.init()
Traceback (most recent call last):
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\sdk\wandb_init.py", line 1164, in init
    return wi.init()
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\sdk\wandb_init.py", line 746, in init
    run_init_handle = backend.interface.deliver_run(run)
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\sdk\interface\interface.py", line 809, in deliver_run
    run_record = self._make_run(run)
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\sdk\interface\interface.py", line 151, in _make_run
    self._make_config(data=config_dict, obj=proto_run.config)
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\sdk\interface\interface.py", line 133, in _make_config
    update.value_json = json_dumps_safer(json_friendly(v)[0])
  File "C:\Users\ramali\Downloads\pypy3.9-v7.3.16-win64 (1)\pypy3.9-v7.3.16-win64\lib\site-packages\wandb\util.py", line 642, in json_friendly
    if getsizeof(obj) > VALUE_BYTES_LIMIT:
TypeError: getsizeof(...)
    getsizeof(object, default) -> int

    Return the size of object in bytes.

sys.getsizeof(object, default) will always return default on PyPy, and
raise a TypeError if default is not provided.

First note that the CPython documentation says that this function may
raise a TypeError, so if you are seeing it, it means that the program
you are using is not correctly handling this case.

On PyPy, though, it always raises TypeError.  Before looking for
alternatives, please take a moment to read the following explanation as
to why it is the case.  What you are looking for may not be possible.

A memory profiler using this function is most likely to give results
inconsistent with reality on PyPy.  It would be possible to have
sys.getsizeof() return a number (with enough work), but that may or
may not represent how much memory the object uses.  It doesn't even
make really sense to ask how much *one* object uses, in isolation
with the rest of the system.  For example, instances have maps,
which are often shared across many instances; in this case the maps
would probably be ignored by an implementation of sys.getsizeof(),
but their overhead is important in some cases if they are many
instances with unique maps.  Conversely, equal strings may share
their internal string data even if they are different objects---or
empty containers may share parts of their internals as long as they
are empty.  Even stranger, some lists create objects as you read
them; if you try to estimate the size in memory of range(10**6) as
the sum of all items' size, that operation will by itself create one
million integer objects that never existed in the first place.

2024-07-29 14:14:23,546 WARNING MsgRouterThr:13664 [router.py:message_loop():77] message_loop has been closed
